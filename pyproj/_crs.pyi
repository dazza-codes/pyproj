from typing import Any, Iterable, Union

from pyproj.enums import ProjVersion, WktVersion

class Axis:
    name: str
    abbrev: str
    direction: str
    unit_conversion_factor: float
    unit_name: str
    unit_auth_code: str
    unit_code: str
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

class AreaOfUse:
    west: float
    south: float
    east: float
    north: float
    name: str
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    @property
    def bounds(self) -> tuple[float]: ...

class Base:
    name: str
    @property
    def remarks(self) -> str: ...
    @property
    def scope(self) -> str: ...
    def to_wkt(
        self, version: Union[WktVersion, str] = "WKT2_2018", pretty: bool = False
    ) -> str: ...
    def to_json(self, pretty: bool = False, indentation: int = 2) -> str: ...
    def to_json_dict(self) -> dict: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: Any) -> bool: ...
    def is_exact_same(self, other: Any) -> bool: ...

class Ellipsoid(Base):
    @property
    def semi_major_metre(self) -> float: ...
    @property
    def semi_minor_metre(self) -> float: ...
    @property
    def is_semi_minor_computed(self) -> bool: ...
    @property
    def inv_flattening(self) -> float: ...
    @property
    def ellipsoid_loaded(self) -> bool: ...
    @staticmethod
    def from_authority(auth_name: str, code: Union[int, str]) -> Ellipsoid: ...
    @staticmethod
    def from_epsg(code: Union[int, str]) -> Ellipsoid: ...
    @staticmethod
    def from_string(ellipsoid_string: str) -> Ellipsoid: ...
    @staticmethod
    def from_json_dict(ellipsoid_dict: dict) -> Ellipsoid: ...
    @staticmethod
    def from_json(ellipsoid_json_str: str) -> Ellipsoid: ...

class PrimeMeridian(Base):
    longitude: float
    unit_conversion_factor: str
    unit_name: str
    @staticmethod
    def from_authority(auth_name: str, code: Union[int, str]) -> PrimeMeridian: ...
    @staticmethod
    def from_epsg(code: Union[int, str]) -> PrimeMeridian: ...
    @staticmethod
    def from_string(ellipsoid_string: str) -> PrimeMeridian: ...
    @staticmethod
    def from_json_dict(ellipsoid_dict: dict) -> PrimeMeridian: ...
    @staticmethod
    def from_json(ellipsoid_json_str: str) -> PrimeMeridian: ...

class Datum(Base):
    @property
    def ellipsoid(self) -> Union[Ellipsoid, None]: ...
    @property
    def prime_meridian(self) -> Union[PrimeMeridian, None]: ...
    @staticmethod
    def from_authority(auth_name: str, code: Union[int, str]) -> Datum: ...
    @staticmethod
    def from_epsg(code: Union[int, str]) -> Datum: ...
    @staticmethod
    def from_string(ellipsoid_string: str) -> Datum: ...
    @staticmethod
    def from_json_dict(ellipsoid_dict: dict) -> Datum: ...
    @staticmethod
    def from_json(ellipsoid_json_str: str) -> Datum: ...

class CoordinateSystem(Base):
    def __init__(self) -> None: ...
    @property
    def axis_list(self) -> Iterable[Axis]: ...

class Param:
    name: str
    auth_name: str
    code: str
    value: str
    unit_conversion_factor: float
    unit_name: str
    unit_auth_name: str
    unit_code: str
    unit_category: str
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

class Grid:
    short_name: str
    full_name: str
    package_name: str
    url: str
    direct_download: str
    open_license: str
    available: str
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

class CoordinateOperation(Base):
    method_name: str
    method_auth_name: str
    method_code: str
    accuracy: float
    is_instantiable: bool
    has_ballpark_transformation: bool
    type_name: str
    @property
    def params(self) -> Iterable[Param]: ...
    @property
    def grids(self) -> Iterable[Grid]: ...
    @property
    def area_of_use(self) -> Union[AreaOfUse, None]: ...
    @property
    def towgs84(self) -> Iterable[float]: ...
    @property
    def operations(self) -> Union[Iterable[CoordinateOperation], None]: ...
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    @staticmethod
    def from_authority(
        auth_name: str, code: Union[int, str]
    ) -> CoordinateOperation: ...
    @staticmethod
    def from_epsg(code: Union[int, str]) -> CoordinateOperation: ...
    @staticmethod
    def from_string(ellipsoid_string: str) -> CoordinateOperation: ...
    @staticmethod
    def from_json_dict(ellipsoid_dict: dict) -> CoordinateOperation: ...
    @staticmethod
    def from_json(ellipsoid_json_str: str) -> CoordinateOperation: ...
    def to_proj4(
        self, version: Union[ProjVersion, str] = ProjVersion.PROJ_5
    ) -> str: ...

class _CRS(Base):
    srs: str
    type_name: str
    def __init__(self, proj_string: str) -> None: ...
    @property
    def ellipsoid(self) -> Union[Ellipsoid, None]: ...
    @property
    def area_of_use(self) -> Union[AreaOfUse, None]: ...
    @property
    def axis_info(self) -> Union[Axis, None]: ...
    @property
    def prime_meridian(self) -> Union[PrimeMeridian, None]: ...
    @property
    def datum(self) -> Union[Datum, None]: ...
    @property
    def sub_crs_list(self) -> Iterable[_CRS]: ...
    @property
    def source_crs(self) -> Union[_CRS, None]: ...
    @property
    def target_crs(self) -> Union[_CRS, None]: ...
    @property
    def geodetic_crs(self) -> Union[_CRS, None]: ...
    @property
    def coordinate_system(self) -> Union[CoordinateSystem, None]: ...
    @property
    def coordinate_operation(self) -> Union[CoordinateOperation, None]: ...
    def to_proj4(
        self, version: Union[ProjVersion, str] = ProjVersion.PROJ_5
    ) -> str: ...
    def to_epsg(self, min_confidence: int = 70) -> Union[int, None]: ...
    def to_authority(
        self, auth_name: Union[str, None] = None, min_confidence: int = 70
    ): ...
    @property
    def is_geographic(self) -> bool: ...
    @property
    def is_projected(self) -> bool: ...
    @property
    def is_vertical(self) -> bool: ...
    @property
    def is_bound(self) -> bool: ...
    @property
    def is_engineering(self) -> bool: ...
    @property
    def is_geocentric(self) -> bool: ...

def is_proj(proj_string: str) -> bool: ...
def is_wkt(proj_string: str) -> bool: ...
def _load_proj_json(in_proj_json: str) -> dict: ...
